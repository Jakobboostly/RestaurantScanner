Goal: Refactor and enhance the current Restaurant Scanner web application for improved accuracy, scalability, and data depth using advanced APIs, headless browser automation, and deeper SEO/UX audits. Maintain the current frontend stack (React 18 + TypeScript + Tailwind + Framer Motion + Vite) and backend stack (Express.js + TypeScript + SSE).

‚úÖ Requirements (Grouped by Functional Area)
1. üîç Restaurant Search Upgrade
Continue using Google Places API for search.

Implement contextual location-aware search refinement:

If user input is ambiguous (e.g., multiple restaurants with the same name), add city/state or geolocation filters.

Display address and business type in search results for better accuracy.

2. üìä Website Analysis Architecture
Integrate Google PageSpeed Insights API with full Lighthouse categories:

performance, accessibility, seo, best-practices.

Use strategy=mobile for consistent results.

If Core Web Vitals "field data" is present, prioritize it in the UI.

Include fallback to Lighthouse via Puppeteer:

Set up Node.js Lighthouse + Puppeteer pipeline to run audits locally (only triggered if PageSpeed API fails or hits quota).

Run in headless mode with mobile emulation.

Return structured Lighthouse JSON.

Implement screenshot capture using Puppeteer:

Take 375x667 mobile view screenshots of scanned sites.

Display them alongside scan scores.

Handle heavy JavaScript websites with Puppeteer rendering before scraping or parsing HTML.

3. üìà SEO & Competitor Benchmarking
Replace or supplement current SERP API with DataForSEO SERP Live API:

Query for "[restaurant name] [city]" and save result positions.

Extract domain names of competitors from top results.

Add DataForSEO On-Page API:

Get meta title, description, canonical tags, keyword density.

Combine this with Lighthouse SEO score for in-depth audit.

Add Competitor Discovery logic:

Query Google Places for 3 closest restaurants of same category.

OR use DataForSEO Competitors API for top overlapping domains.

Run same Lighthouse + SERP audit on each competitor and compare.

Display comparison gauges:

Performance, SEO, Accessibility, Best-Practices, and mobile responsiveness side-by-side (restaurant vs top competitor).

4. üì± Mobile UX + Accessibility
Leverage Lighthouse accessibility and mobile UX audits:

Include color contrast, alt text, tap targets, font sizing, etc.

If site fails mobile-friendly checks, show explicit reasons (e.g. missing viewport tag).

Optional: Allow toggling between mobile/desktop scan.

5. üß† UX Improvements in App
Show step-by-step animated scan phases:

Phase 1: Verifying Restaurant (Google Places)

Phase 2: Scanning Performance (PageSpeed)

Phase 3: Auditing SEO (DataForSEO/Lighthouse)

Phase 4: Competitor Benchmarking (Places or DataForSEO)

Phase 5: Finishing Report (render scorecards, screenshots)

Each phase should:

Show unique gradient backgrounds & animated icons.

Have a minimum 3-second duration, even if instant.

Floating Action Indicators:

Show small cards for Network, Security, Performance status during scanning.

Security: check HTTPS, mixed content, security headers (optional).

6. üì¶ Architecture Enhancements
Add intelligent caching layer:

Cache API results (e.g., PageSpeed scores, competitor lists) for 24 hrs.

Identify restaurant via Google Place ID as cache key.

Reduce API quota usage while maintaining accuracy.

Optional: add lightweight SQLite or Redis for persistent cache.

7. ‚ö†Ô∏è Error Handling & Fallback UX
For each phase, if API fails:

Display fallback mock data + note ‚ÄúLive data temporarily unavailable.‚Äù

Retry logic (max 2 retries) before fallback.

Log errors to server console or local file.

üìö API & Tool Stack Summary
Function	Tool / API	Purpose
Restaurant Search	Google Places API	Accurate, up-to-date restaurant info
Performance Audit	PageSpeed Insights API	Google Lighthouse-based web vitals
Performance Fallback	Lighthouse + Puppeteer	Local audit pipeline (no quotas)
SEO Rank Tracking	DataForSEO SERP Live API	Keyword ranking & competitors
On-Page SEO	DataForSEO On-Page API	Titles, meta, keywords, schema
Competitor Discovery	DataForSEO or Places API	Benchmarking similar restaurants
Mobile Screenshots	Puppeteer	Renders + screenshots for visual feedback
Caching	SQLite/Redis (optional)	Improve API cost and consistency

üí° Advanced Bonus Ideas (Optional)
Save scan results to backend & allow sharing via unique link.

Add dark mode toggle to UI.

Generate downloadable PDF report of scan results.

Support scan via restaurant website URL directly (optional mode).

